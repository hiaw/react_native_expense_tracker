// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<View
  style={
    Object {
      "flex": 1,
      "marginTop": 65,
    }
  }
>
  <View
    style={
      Array [
        Object {},
        undefined,
      ]
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      style={
        Array [
          Object {
            "fontFamily": undefined,
          },
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          Array [
            Object {
              "color": "#86939e",
              "fontSize": 15,
              "fontWeight": "bold",
              "marginBottom": 1,
              "marginLeft": 20,
              "marginRight": 20,
              "marginTop": 15,
            },
            undefined,
            undefined,
          ],
        ]
      }
    >
      Role
    </Text>
  </View>
  <View
    style={undefined}
  >
    <RCTPicker
      items={
        Array [
          Object {
            "label": "Admin",
            "textColor": undefined,
            "value": "admin",
          },
          Object {
            "label": "Manager",
            "textColor": undefined,
            "value": "manager",
          },
          Object {
            "label": "User",
            "textColor": undefined,
            "value": "user",
          },
        ]
      }
      onChange={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      selectedIndex={0}
      style={
        Array [
          Object {
            "height": 216,
          },
          undefined,
        ]
      }
    />
  </View>
  <View
    style={
      Array [
        Object {},
        undefined,
      ]
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      style={
        Array [
          Object {
            "fontFamily": undefined,
          },
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          Array [
            Object {
              "color": "#86939e",
              "fontSize": 15,
              "fontWeight": "bold",
              "marginBottom": 1,
              "marginLeft": 20,
              "marginRight": 20,
              "marginTop": 15,
            },
            undefined,
            undefined,
          ],
        ]
      }
    >
      Email
    </Text>
  </View>
  <View
    style={
      Array [
        Object {
          "borderBottomColor": "#bdc6cf",
          "borderBottomWidth": 1,
          "marginLeft": 20,
          "marginRight": 20,
        },
        undefined,
      ]
    }
  >
    <TextInput
      autoCapitalize={undefined}
      autoCorrect={undefined}
      autoFocus={undefined}
      blurOnSubmit={undefined}
      clearButtonMode={undefined}
      clearTextOnFocus={undefined}
      dataDetectorTypes={undefined}
      defaultValue={undefined}
      editable={undefined}
      enablesReturnKeyAutomatically={undefined}
      inlineImageLeft={undefined}
      inlineImagePadding={undefined}
      keyboardAppearance={undefined}
      keyboardType={undefined}
      maxLength={undefined}
      multiline={undefined}
      numberOfLines={undefined}
      onBlur={undefined}
      onChange={undefined}
      onChangeText={[Function]}
      onContentSizeChange={undefined}
      onEndEditing={undefined}
      onFocus={undefined}
      onKeyPress={undefined}
      onLayout={undefined}
      onSelectionChange={undefined}
      onSubmitEditing={undefined}
      placeholder={undefined}
      placeholderTextColor={undefined}
      returnKeyLabel={undefined}
      returnKeyType={undefined}
      secureTextEntry={undefined}
      selectTextOnFocus={undefined}
      selectionColor="#86939e"
      selectionState={undefined}
      style={
        Array [
          Object {
            "color": "#86939e",
            "fontSize": 17.5,
            "height": 36,
          },
          undefined,
        ]
      }
      underlineColorAndroid={undefined}
      value="test@test.com"
    />
  </View>
  <View>
    <View
      accessibilityComponentType="button"
      accessibilityLabel={undefined}
      accessibilityTraits={
        Array [
          "button",
        ]
      }
      accessible={true}
      hitSlop={undefined}
      isTVSelectable={true}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "color": "#0C42FD",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Save
        </Text>
      </View>
    </View>
    <View
      accessibilityComponentType="button"
      accessibilityLabel={undefined}
      accessibilityTraits={
        Array [
          "button",
        ]
      }
      accessible={true}
      hitSlop={undefined}
      isTVSelectable={true}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "color": "#0C42FD",
                "fontSize": 18,
                "padding": 8,
                "textAlign": "center",
              },
              Object {
                "color": "red",
              },
            ]
          }
        >
          Delete
        </Text>
      </View>
    </View>
  </View>
</View>
`;
